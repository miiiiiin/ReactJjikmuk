{"ast":null,"code":"var _jsxFileName = \"/Users/songkyungmin/Study/React/simpleDiary/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\n\n// const dummyList = [\n// {\n//   id:1,\n//   author:\"민송경\",\n//   content:\"ㅎㅇ\",\n//   emotion:5,\n//   created_date: new Date().getTime() // milliseconds 숫자로 변환해서 저장(string화 위해)\n// },\n// {\n//   id:2,\n//   author:\"민송경2\",\n//   content:\"ㅎㅇ2\",\n//   emotion:3,\n//   created_date: new Date().getTime() // milliseconds 숫자로 변환해서 저장(string화 위해)\n// },\n// {\n//   id:3,\n//   author:\"민송경3\",\n//   content:\"ㅎㅇ3\",\n//   emotion:2,\n//   created_date: new Date().getTime() // milliseconds 숫자로 변환해서 저장(string화 위해)\n// }\n// ];\n\n// data 스테이트는 diaryList로 사용되기 때문에 props로 전달\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n\n  // dataId.current는 어떤 dom도 선택하지 않고 그냥 0이라는 값을 가리킴\n  const dataId = useRef(0);\n\n  // DiaryEditor에 props로 전달\n  // 각 입력요소들을 파라미터로 받아 이 함수가 받아서 setData를 이용해서 data를 업데이트 시키는 로직\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([...data]);\n  };\n\n  // data로 props를 전달\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PSh4R9M9XXzghkCT8iIKMDh9kfM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","DiaryEditor","DiaryList","jsxDEV","_jsxDEV","App","_s","data","setData","dataId","onCreate","author","content","emotion","created_date","Date","getTime","newItem","id","current","className","children","fileName","_jsxFileName","lineNumber","columnNumber","diaryList","_c","$RefreshReg$"],"sources":["/Users/songkyungmin/Study/React/simpleDiary/src/App.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\n\n// const dummyList = [\n  // {\n  //   id:1,\n  //   author:\"민송경\",\n  //   content:\"ㅎㅇ\",\n  //   emotion:5,\n  //   created_date: new Date().getTime() // milliseconds 숫자로 변환해서 저장(string화 위해)\n  // },\n  // {\n  //   id:2,\n  //   author:\"민송경2\",\n  //   content:\"ㅎㅇ2\",\n  //   emotion:3,\n  //   created_date: new Date().getTime() // milliseconds 숫자로 변환해서 저장(string화 위해)\n  // },\n  // {\n  //   id:3,\n  //   author:\"민송경3\",\n  //   content:\"ㅎㅇ3\",\n  //   emotion:2,\n  //   created_date: new Date().getTime() // milliseconds 숫자로 변환해서 저장(string화 위해)\n  // }\n// ];\n\n\n// data 스테이트는 diaryList로 사용되기 때문에 props로 전달\nfunction App() {\n\n  const [data, setData] = useState([]);\n\n  // dataId.current는 어떤 dom도 선택하지 않고 그냥 0이라는 값을 가리킴\n  const dataId = useRef(0);\n\n\n  // DiaryEditor에 props로 전달\n  // 각 입력요소들을 파라미터로 받아 이 함수가 받아서 setData를 이용해서 data를 업데이트 시키는 로직\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    }\n    dataId.current += 1;\n    setData([...data,])\n  };\n\n  // data로 props를 전달\n  return (\n    <div className=\"App\">\n    <DiaryEditor onCreate={onCreate}/>\n    <DiaryList diaryList={data}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMS,MAAM,GAAGV,MAAM,CAAC,CAAC,CAAC;;EAGxB;EACA;EACA,MAAMW,QAAQ,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC7C,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACzC,MAAMC,OAAO,GAAG;MACdN,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,YAAY;MACZI,EAAE,EAAET,MAAM,CAACU;IACb,CAAC;IACDV,MAAM,CAACU,OAAO,IAAI,CAAC;IACnBX,OAAO,CAAC,CAAC,GAAGD,IAAI,CAAE,CAAC;EACrB,CAAC;;EAED;EACA,oBACEH,OAAA;IAAKgB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACpBjB,OAAA,CAACH,WAAW;MAACS,QAAQ,EAAEA;IAAS;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAClCrB,OAAA,CAACF,SAAS;MAACwB,SAAS,EAAEnB;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV;AAACnB,EAAA,CA9BQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}