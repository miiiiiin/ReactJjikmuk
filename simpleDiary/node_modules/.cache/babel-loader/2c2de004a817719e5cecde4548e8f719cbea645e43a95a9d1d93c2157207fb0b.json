{"ast":null,"code":"var _jsxFileName = \"/Users/songkyungmin/Study/React/simpleDiary/src/DiaryEditor.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiaryEditor = () => {\n  _s();\n  // author라는 상태의 상태변화를 주도할 setAuthor라는 상태변화 함수\n  const [author, setAuthor] = useState(\"\");\n\n  // 최상위 태그인 div className을 컴포넌트 이름과 맞춰줌\n  // CSS의 클래스를 가지고 스타일링할 때 클래스의 이름과 컴포넌트의 이름을 정확히 일치시켜\n  // 좀 더 직관적으로 스타일 코드를 작성하기 위함임. (강사개인의견)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryEditor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: author,\n        onChange: e => {\n          console.log(e.target.value);\n          // 이벤트 객체의 값이 출력됨\n          setAuthor(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 12\n  }, this);\n};\n\n// onChange 이벤트에 등록되는 콜백함수는 이벤트 객체 e라는 것을 매개변수로 전달받음\n// onChange는 값이 바뀌었을 때 수행하는 이벤트\n_s(DiaryEditor, \"5QLKDnt11I61hFQrq0QCvVVmWAs=\");\n_c = DiaryEditor;\nexport default DiaryEditor;\nvar _c;\n$RefreshReg$(_c, \"DiaryEditor\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","DiaryEditor","_s","author","setAuthor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","console","log","target","_c","$RefreshReg$"],"sources":["/Users/songkyungmin/Study/React/simpleDiary/src/DiaryEditor.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst DiaryEditor = () => {\n\n    // author라는 상태의 상태변화를 주도할 setAuthor라는 상태변화 함수\n    const [author, setAuthor] = useState(\"\");\n\n\n    // 최상위 태그인 div className을 컴포넌트 이름과 맞춰줌\n    // CSS의 클래스를 가지고 스타일링할 때 클래스의 이름과 컴포넌트의 이름을 정확히 일치시켜\n    // 좀 더 직관적으로 스타일 코드를 작성하기 위함임. (강사개인의견)\n    return <div className=\"DiaryEditor\">\n        <h2>오늘의 일기</h2>\n        <div>\n            <input value={author} onChange={(e) => {\n                console.log(e.target.value);\n                // 이벤트 객체의 값이 출력됨\n                setAuthor(e.target.value)\n            }}/>\n        </div>\n    </div>\n};\n\n// onChange 이벤트에 등록되는 콜백함수는 이벤트 객체 e라는 것을 매개변수로 전달받음\n// onChange는 값이 바뀌었을 때 수행하는 이벤트\n\nexport default DiaryEditor;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtB;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAGxC;EACA;EACA;EACA,oBAAOE,OAAA;IAAKK,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC/BN,OAAA;MAAAM,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfV,OAAA;MAAAM,QAAA,eACIN,OAAA;QAAOW,KAAK,EAAER,MAAO;QAACS,QAAQ,EAAGC,CAAC,IAAK;UACnCC,OAAO,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAACL,KAAK,CAAC;UAC3B;UACAP,SAAS,CAACS,CAAC,CAACG,MAAM,CAACL,KAAK,CAAC;QAC7B;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AACV,CAAC;;AAED;AACA;AAAAR,EAAA,CAtBMD,WAAW;AAAAgB,EAAA,GAAXhB,WAAW;AAwBjB,eAAeA,WAAW;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}