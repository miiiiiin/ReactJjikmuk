{"ast":null,"code":"var _jsxFileName = \"/Users/songkyungmin/Study/React/simpleDiary/src/DiaryEditor.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiaryEditor = () => {\n  _s();\n  const [state, setState] = useState({\n    author: \"\",\n    content: \"\"\n  });\n\n  // event 객체를 받도록 함 (input과 textarea의 onChange에 전달됨)\n  // 상태변화 이벤트 핸들러도 아래와 같이 합칠 수 있음\n  const handleChangeState = e => {\n    console.log(e.target.name);\n    console.log(e.target.value);\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n      // author와 content의 값을 각각 바꾸면 각각의 값이 지동으로 업데이트됨.\n    });\n  };\n\n  // author라는 상태의 상태변화를 주도할 setAuthor라는 상태변화 함수\n  // const [author, setAuthor] = useState(\"\");\n  // const [content, setContent] = useState(\"\");\n\n  // 최상위 태그인 div className을 컴포넌트 이름과 맞춰줌\n  // CSS의 클래스를 가지고 스타일링할 때 클래스의 이름과 컴포넌트의 이름을 정확히 일치시켜\n  // 좀 더 직관적으로 스타일 코드를 작성하기 위함임. (강사개인의견)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryEditor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: state.author\n        //  onChange={(e) => {\n        // setAuthor(e.target.value)\n        // 값이 변할 때마다 상태를 그 값으로 업데이트\n\n        // state에 객체가 가지고 있는 author의 값만 현재 입력받은 값으로 바꿔야함\n        // setState({\n        //     ... state, // author는 author값, content는 content값 (원래의 값을 객체에 할당 가능)\n        // 주의 : 원래 있던 state를 먼저 펼쳐주고 나서, 변경하고자 하는 state의 프로퍼티를 마지막으로 적어주어야함!\n        // author:e.target.value,\n        // content:state.content\n        // });\n        // }}\n        ,\n        onChange: handleChangeState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"content\",\n        value: state.content\n        //  onChange={(e) => {\n        // setContent(e.target.value);\n        // setState({\n        // author:state.author,\n        // ...state,\n        // content:e.target.value\n        // });\n        // }}\n        ,\n        onChange: handleChangeState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this);\n};\n\n// onChange 이벤트에 등록되는 콜백함수는 이벤트 객체 e라는 것을 매개변수로 전달받음\n// onChange는 값이 바뀌었을 때 수행하는 이벤트\n_s(DiaryEditor, \"zW/ll60ap1QQt0mFobQDYSIEs3Q=\");\n_c = DiaryEditor;\nexport default DiaryEditor;\nvar _c;\n$RefreshReg$(_c, \"DiaryEditor\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","DiaryEditor","_s","state","setState","author","content","handleChangeState","e","console","log","target","name","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["/Users/songkyungmin/Study/React/simpleDiary/src/DiaryEditor.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst DiaryEditor = () => {\n\n    const [state, setState] = useState({\n        author:\"\",\n        content:\"\"\n    });\n\n    // event 객체를 받도록 함 (input과 textarea의 onChange에 전달됨)\n    // 상태변화 이벤트 핸들러도 아래와 같이 합칠 수 있음\n    const handleChangeState = (e) => {\n        console.log(e.target.name);\n        console.log(e.target.value);\n\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n            // author와 content의 값을 각각 바꾸면 각각의 값이 지동으로 업데이트됨.\n        });\n    };\n\n    // author라는 상태의 상태변화를 주도할 setAuthor라는 상태변화 함수\n    // const [author, setAuthor] = useState(\"\");\n    // const [content, setContent] = useState(\"\");\n\n    // 최상위 태그인 div className을 컴포넌트 이름과 맞춰줌\n    // CSS의 클래스를 가지고 스타일링할 때 클래스의 이름과 컴포넌트의 이름을 정확히 일치시켜\n    // 좀 더 직관적으로 스타일 코드를 작성하기 위함임. (강사개인의견)\n    return <div className=\"DiaryEditor\">\n        <h2>오늘의 일기</h2>\n        <div>\n            <input value={state.author}\n            //  onChange={(e) => {\n                // setAuthor(e.target.value)\n                // 값이 변할 때마다 상태를 그 값으로 업데이트\n\n                // state에 객체가 가지고 있는 author의 값만 현재 입력받은 값으로 바꿔야함\n                // setState({\n                //     ... state, // author는 author값, content는 content값 (원래의 값을 객체에 할당 가능)\n                    // 주의 : 원래 있던 state를 먼저 펼쳐주고 나서, 변경하고자 하는 state의 프로퍼티를 마지막으로 적어주어야함!\n                    // author:e.target.value,\n                    // content:state.content\n                // });\n            // }}\n            onChange={handleChangeState}\n            />\n        </div>\n        <div>\n            <textarea\n            name='content'\n            value={state.content}\n            //  onChange={(e) => {\n                // setContent(e.target.value);\n                // setState({\n                    // author:state.author,\n                    // ...state,\n                    // content:e.target.value\n                // });\n            // }}\n            onChange={handleChangeState}\n            />\n        </div>\n    </div>\n};\n\n// onChange 이벤트에 등록되는 콜백함수는 이벤트 객체 e라는 것을 매개변수로 전달받음\n// onChange는 값이 바뀌었을 때 수행하는 이벤트\n\nexport default DiaryEditor;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC;IAC/BO,MAAM,EAAC,EAAE;IACTC,OAAO,EAAC;EACZ,CAAC,CAAC;;EAEF;EACA;EACA,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC7BC,OAAO,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAACC,IAAI,CAAC;IAC1BH,OAAO,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAACE,KAAK,CAAC;IAE3BT,QAAQ,CAAC;MACL,GAAGD,KAAK;MACR,CAACK,CAAC,CAACG,MAAM,CAACC,IAAI,GAAGJ,CAAC,CAACG,MAAM,CAACE;MAC1B;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;EACA;EACA;;EAEA;EACA;EACA;EACA,oBAAOb,OAAA;IAAKc,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC/Bf,OAAA;MAAAe,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfnB,OAAA;MAAAe,QAAA,eACIf,OAAA;QAAOa,KAAK,EAAEV,KAAK,CAACE;QACpB;QACI;QACA;;QAEA;QACA;QACA;QACI;QACA;QACA;QACJ;QACJ;QAAA;QACAe,QAAQ,EAAEb;MAAkB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNnB,OAAA;MAAAe,QAAA,eACIf,OAAA;QACAY,IAAI,EAAC,SAAS;QACdC,KAAK,EAAEV,KAAK,CAACG;QACb;QACI;QACA;QACI;QACA;QACA;QACJ;QACJ;QAAA;QACAc,QAAQ,EAAEb;MAAkB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AACV,CAAC;;AAED;AACA;AAAAjB,EAAA,CAjEMD,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AAmEjB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}