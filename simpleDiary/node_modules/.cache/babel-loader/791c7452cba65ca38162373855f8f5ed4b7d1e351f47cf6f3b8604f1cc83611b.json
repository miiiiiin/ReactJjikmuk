{"ast":null,"code":"var _jsxFileName = \"/Users/songkyungmin/Study/React/simpleDiary/src/DiaryList.js\";\n// DiaryList props를 전달받을 수 있음\n// jsx 표현식 -> diaryList.map (it으로 원소를 한번씩 순회해서 div요소들의 아이템들을 만듬)\n\nimport DiaryItem from \"./DiaryItem\";\n\n// jsx 표현 -> {it.author} (객체의 점 표기법으로 객체의 프로퍼티에 접근 가능)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiaryList = ({\n  onDelete,\n  diaryList\n}) => {\n  console.log(diaryList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryList\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC77C\\uAE30 \\uB9AC\\uC2A4\\uD2B8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [diaryList.length, \"\\uAC1C\\uC758 \\uC77C\\uAE30\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: diaryList.map(it => /*#__PURE__*/_jsxDEV(DiaryItem, {\n        ...it,\n        onDelete: onDelete\n      }, it.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n};\n// 리스트의 아이템이기 때문에 key를 it.id로 전달\n// 일기 하나 객체에 포함된 모든 데이터를 ... 스프레드 연산자를 통해서 전달\n// it이라는 객체에 포함된 모든 데이터가 DiaryItem에 props로 전달됨\n\n//undefined로 전달될 것 같은 props를 대비해 기본값을 설정하는 것\n// DiaryList 컴포넌트의 diaryList props의 기본값을 빈 배열로 설정\n_c = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\n\n// es 모듈시스템에 내보내기\nexport default DiaryList;\nvar _c;\n$RefreshReg$(_c, \"DiaryList\");","map":{"version":3,"names":["DiaryItem","jsxDEV","_jsxDEV","DiaryList","onDelete","diaryList","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","it","id","_c","defaultProps","$RefreshReg$"],"sources":["/Users/songkyungmin/Study/React/simpleDiary/src/DiaryList.js"],"sourcesContent":["// DiaryList props를 전달받을 수 있음\n// jsx 표현식 -> diaryList.map (it으로 원소를 한번씩 순회해서 div요소들의 아이템들을 만듬)\n\nimport DiaryItem from \"./DiaryItem\";\n\n// jsx 표현 -> {it.author} (객체의 점 표기법으로 객체의 프로퍼티에 접근 가능)\nconst DiaryList = ({ onDelete, diaryList }) => {\n    console.log(diaryList);\n    return <div className=\"DiaryList\">\n        <h2>일기 리스트</h2>\n        <h4>{diaryList.length}개의 일기</h4>\n        <div>\n            {diaryList.map((it)=>(\n                <DiaryItem key={it.id} {...it} onDelete={onDelete}/>\n            ))}\n        </div>\n    </div>\n}\n// 리스트의 아이템이기 때문에 key를 it.id로 전달\n// 일기 하나 객체에 포함된 모든 데이터를 ... 스프레드 연산자를 통해서 전달\n// it이라는 객체에 포함된 모든 데이터가 DiaryItem에 props로 전달됨\n\n//undefined로 전달될 것 같은 props를 대비해 기본값을 설정하는 것\n// DiaryList 컴포넌트의 diaryList props의 기본값을 빈 배열로 설정\nDiaryList.defaultProps={\n    diaryList: []\n}\n\n// es 모듈시스템에 내보내기\nexport default DiaryList;"],"mappings":";AAAA;AACA;;AAEA,OAAOA,SAAS,MAAM,aAAa;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAC3CC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EACtB,oBAAOH,OAAA;IAAKM,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAC7BP,OAAA;MAAAO,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfX,OAAA;MAAAO,QAAA,GAAKJ,SAAS,CAACS,MAAM,EAAC,2BAAK;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCX,OAAA;MAAAO,QAAA,EACKJ,SAAS,CAACU,GAAG,CAAEC,EAAE,iBACdd,OAAA,CAACF,SAAS;QAAA,GAAiBgB,EAAE;QAAEZ,QAAQ,EAAEA;MAAS,GAAlCY,EAAE,CAACC,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA8B,CACtD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AACV,CAAC;AACD;AACA;AACA;;AAEA;AACA;AAAAK,EAAA,GAjBMf,SAAS;AAkBfA,SAAS,CAACgB,YAAY,GAAC;EACnBd,SAAS,EAAE;AACf,CAAC;;AAED;AACA,eAAeF,SAAS;AAAC,IAAAe,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}