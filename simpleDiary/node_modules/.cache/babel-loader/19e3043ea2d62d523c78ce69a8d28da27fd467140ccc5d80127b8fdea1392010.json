{"ast":null,"code":"var _jsxFileName = \"/Users/songkyungmin/Study/React/simpleDiary/src/LifeCycle.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n/* useEffect */\n// const Lifecycle = () => {\n\n//     // callback 함수 넣고 dependency array\n//     useEffect(() => {\n//         // 컴포넌트가 마운트된 시점에 콘솔이 수행됨\n//         // 진짜 마운트된 시점에만 useeffect의 callback 함수가 실행되는지 확인하기 위해 카운트 증가\n//         // 그러나 useEffect에 빈 배열을 전달하게 되면 callback함수는 컴포넌트가 마운트 된 시점에만 작동하기 때문에\n//         // 카운트를 증가시켜도 콘솔이 수행되지 않음 \n//         console.log(\"mount!\");\n//     }, []);\n\n//     // 컴포넌트가 업데이트되는 순간 제어 \n//     // 컴포넌트가 업데이트되는 순간: state가 변경될 때, 부모에서 내려받는 props가 바뀌거나 부모 컴포넌트가 리렌더링되면 자기 자신도 리렌더링됨\n//     // state를 바꾸는 순간을  useEffect로 제어\n//     // dependency array를 전달하지 않으면 됨.\n\n//     useEffect(() => {\n//         // count 증가시키면 콘솔 수행됨\n//         console.log(\"update!\");\n//     });\n//     const [count, setCount] = useState(0); //counter에 사용될 state\n//     const [text, setText] = useState(\"\"); //input에 사용될 text state\n\n//     /* useEffect의 특별한 기능 */\n//     // dependency array의 배열이 변화하는 순간 콜백 수행됨\n//     // 감지하고 싶은 것만 감지해서 그 값이 변화하는 순간에만 콜백함수 수행시킬 수 있음\n//     useEffect(()=>{\n//         console.log(`count is update: ${count}`)\n//         if (count>5) {\n//             alert(\"count가 5를 넘었습니다. 1로 초기화합니다\");\n//             setCount(1);\n//         }\n//     }, [count]);\n\n//     useEffect(()=>{\n//         console.log(`text is update: ${text}`)\n//     }, [text]);\n\n//     return (\n//         <div style={{padding: 20}}>\n//         <div>\n//             {count}\n//             <button onClick={()=>setCount(count+1)}>+</button>\n//         </div>\n//         <div>\n//             <input value={text} onChange={(e)=>setText(e.target.value)}></input>\n//         </div>\n//     </div>\n//     );\n// };\n\n//하나의 파일에 두개의 컴포넌트 생성해도 됨\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UnMountTest = () => {\n  _s();\n  // useEffect 사용해서 컴포넌트가 unmount 되는 순간 제어\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Unmount Testing Component\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n};\n_s(UnMountTest, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = UnMountTest;\nconst Lifecycle = () => {\n  _s2();\n  const [isVisible, setIsVisible] = useState(false);\n  const toggle = () => setIsVisible(!isVisible);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggle,\n      children: \"ON/OFF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), isVisible && /*#__PURE__*/_jsxDEV(UnMountTest, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n  //isVisible가 true이면 UnMountTest가 반환이 되어서 화면에 렌더링됨 \n  // false이면 UnMountTest 컴포넌트가 렌더링이 안됨\n};\n_s2(Lifecycle, \"QjDZesRvLCmcrZLxgN677nXnVLA=\");\n_c2 = Lifecycle;\nexport default Lifecycle;\nvar _c, _c2;\n$RefreshReg$(_c, \"UnMountTest\");\n$RefreshReg$(_c2, \"Lifecycle\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","UnMountTest","_s","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Lifecycle","_s2","isVisible","setIsVisible","toggle","style","padding","onClick","_c2","$RefreshReg$"],"sources":["/Users/songkyungmin/Study/React/simpleDiary/src/LifeCycle.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n/* useEffect */\n// const Lifecycle = () => {\n\n//     // callback 함수 넣고 dependency array\n//     useEffect(() => {\n//         // 컴포넌트가 마운트된 시점에 콘솔이 수행됨\n//         // 진짜 마운트된 시점에만 useeffect의 callback 함수가 실행되는지 확인하기 위해 카운트 증가\n//         // 그러나 useEffect에 빈 배열을 전달하게 되면 callback함수는 컴포넌트가 마운트 된 시점에만 작동하기 때문에\n//         // 카운트를 증가시켜도 콘솔이 수행되지 않음 \n//         console.log(\"mount!\");\n//     }, []);\n\n//     // 컴포넌트가 업데이트되는 순간 제어 \n//     // 컴포넌트가 업데이트되는 순간: state가 변경될 때, 부모에서 내려받는 props가 바뀌거나 부모 컴포넌트가 리렌더링되면 자기 자신도 리렌더링됨\n//     // state를 바꾸는 순간을  useEffect로 제어\n//     // dependency array를 전달하지 않으면 됨.\n\n//     useEffect(() => {\n//         // count 증가시키면 콘솔 수행됨\n//         console.log(\"update!\");\n//     });\n//     const [count, setCount] = useState(0); //counter에 사용될 state\n//     const [text, setText] = useState(\"\"); //input에 사용될 text state\n\n\n//     /* useEffect의 특별한 기능 */\n//     // dependency array의 배열이 변화하는 순간 콜백 수행됨\n//     // 감지하고 싶은 것만 감지해서 그 값이 변화하는 순간에만 콜백함수 수행시킬 수 있음\n//     useEffect(()=>{\n//         console.log(`count is update: ${count}`)\n//         if (count>5) {\n//             alert(\"count가 5를 넘었습니다. 1로 초기화합니다\");\n//             setCount(1);\n//         }\n//     }, [count]);\n\n//     useEffect(()=>{\n//         console.log(`text is update: ${text}`)\n//     }, [text]);\n\n\n//     return (\n//         <div style={{padding: 20}}>\n//         <div>\n//             {count}\n//             <button onClick={()=>setCount(count+1)}>+</button>\n//         </div>\n//         <div>\n//             <input value={text} onChange={(e)=>setText(e.target.value)}></input>\n//         </div>\n//     </div>\n//     );\n// };\n\n//하나의 파일에 두개의 컴포넌트 생성해도 됨\nconst UnMountTest = () => {\n    // useEffect 사용해서 컴포넌트가 unmount 되는 순간 제어\n    useEffect(()=>{\n\n    }, [])\n    return <div>Unmount Testing Component</div>\n};\n\nconst Lifecycle = () => {\n\n    const [isVisible, setIsVisible] = useState(false);\n    const toggle = () => setIsVisible(!isVisible);\n\n    return (\n        <div style={{padding: 20}}>\n            <button onClick={toggle}>ON/OFF</button>\n            {isVisible && <UnMountTest/> }\n        </div>\n    )\n    //isVisible가 true이면 UnMountTest가 반환이 되어서 화면에 렌더링됨 \n    // false이면 UnMountTest 컴포넌트가 렌더링이 안됨\n};\n\nexport default Lifecycle;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACAL,SAAS,CAAC,MAAI,CAEd,CAAC,EAAE,EAAE,CAAC;EACN,oBAAOG,OAAA;IAAAG,QAAA,EAAK;EAAyB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC/C,CAAC;AAACL,EAAA,CANID,WAAW;AAAAO,EAAA,GAAXP,WAAW;AAQjB,MAAMQ,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAEpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMe,MAAM,GAAGA,CAAA,KAAMD,YAAY,CAAC,CAACD,SAAS,CAAC;EAE7C,oBACIX,OAAA;IAAKc,KAAK,EAAE;MAACC,OAAO,EAAE;IAAE,CAAE;IAAAZ,QAAA,gBACtBH,OAAA;MAAQgB,OAAO,EAAEH,MAAO;MAAAV,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACvCI,SAAS,iBAAIX,OAAA,CAACC,WAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;EAEV;EACA;AACJ,CAAC;AAACG,GAAA,CAbID,SAAS;AAAAQ,GAAA,GAATR,SAAS;AAef,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}