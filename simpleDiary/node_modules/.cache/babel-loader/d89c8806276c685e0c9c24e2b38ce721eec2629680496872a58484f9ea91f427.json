{"ast":null,"code":"var _jsxFileName = \"/Users/songkyungmin/Study/React/simpleDiary/src/DiaryEditor.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\n\n// onCreate 함수를 props로 전달받음\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiaryEditor = ({\n  onCreate\n}) => {\n  _s();\n  // react.mutableobject가 저장됨. html 돔 요소를 접근할 수 있는 역할\n  // authorInput이라는 레퍼런스 객체를 통해서 input 태그에 접근할 수 있게 됨\n  const authorInput = useRef();\n  const contentInput = useRef();\n  const [state, setState] = useState({\n    author: \"\",\n    content: \"\",\n    emotion: 1\n  });\n\n  // event 객체를 받도록 함 (input과 textarea의 onChange에 전달됨)\n  // 상태변화 이벤트 핸들러도 아래와 같이 합칠 수 있음\n  const handleChangeState = e => {\n    console.log(e.target.name);\n    console.log(e.target.value);\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n      // author와 content의 값을 각각 바꾸면 각각의 값이 지동으로 업데이트됨.\n    });\n  };\n\n  const handleSubmit = e => {\n    if (state.author.length < 1) {\n      // alert('최소 1글자 이상 입력');\n      authorInput.current.focus();\n      // Dom 요소를 선택하는 useRef 기능을 통해 생성한 레퍼런스 객체는 현재 객체를\n      // current라는 프로퍼티를 통해서 authorInput.current는 authorInput 태그가 되고 focus 함수를 이용할 수 있음\n      return;\n    }\n    if (state.content.length < 5) {\n      // alert('최소 5글자 이상 입력');\n      contentInput.current.focus();\n      return;\n    }\n    onCreate(state.author, state.content, state.emotion);\n    alert('성공');\n  };\n\n  // author라는 상태의 상태변화를 주도할 setAuthor라는 상태변화 함수\n  // const [author, setAuthor] = useState(\"\");\n  // const [content, setContent] = useState(\"\");\n\n  // 최상위 태그인 div className을 컴포넌트 이름과 맞춰줌\n  // CSS의 클래스를 가지고 스타일링할 때 클래스의 이름과 컴포넌트의 이름을 정확히 일치시켜\n  // 좀 더 직관적으로 스타일 코드를 작성하기 위함임. (강사개인의견)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryEditor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: authorInput,\n        name: \"author\",\n        type: \"text\",\n        value: state.author\n        //  onChange={(e) => {\n        // setAuthor(e.target.value)\n        // 값이 변할 때마다 상태를 그 값으로 업데이트\n\n        // state에 객체가 가지고 있는 author의 값만 현재 입력받은 값으로 바꿔야함\n        // setState({\n        //     ... state, // author는 author값, content는 content값 (원래의 값을 객체에 할당 가능)\n        // 주의 : 원래 있던 state를 먼저 펼쳐주고 나서, 변경하고자 하는 state의 프로퍼티를 마지막으로 적어주어야함!\n        // author:e.target.value,\n        // content:state.content\n        // });\n        // }}\n        ,\n        onChange: handleChangeState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: contentInput,\n        name: \"content\",\n        value: state.content\n        //  onChange={(e) => {\n        // setContent(e.target.value);\n        // setState({\n        // author:state.author,\n        // ...state,\n        // content:e.target.value\n        // });\n        // }}\n        ,\n        onChange: handleChangeState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"emotion\",\n        value: state.emotion,\n        onChange: handleChangeState,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 1,\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 2,\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 3,\n          children: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 4,\n          children: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"\\uC800\\uC7A5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n};\n\n// onChange 이벤트에 등록되는 콜백함수는 이벤트 객체 e라는 것을 매개변수로 전달받음\n// onChange는 값이 바뀌었을 때 수행하는 이벤트\n_s(DiaryEditor, \"IGCWWn/nwQJhHY5xwEAatuXamzk=\");\n_c = DiaryEditor;\nexport default DiaryEditor;\nvar _c;\n$RefreshReg$(_c, \"DiaryEditor\");","map":{"version":3,"names":["useRef","useState","jsxDEV","_jsxDEV","DiaryEditor","onCreate","_s","authorInput","contentInput","state","setState","author","content","emotion","handleChangeState","e","console","log","target","name","value","handleSubmit","length","current","focus","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/songkyungmin/Study/React/simpleDiary/src/DiaryEditor.js"],"sourcesContent":["import { useRef, useState } from \"react\";\n\n// onCreate 함수를 props로 전달받음\nconst DiaryEditor = ({ onCreate }) => {\n\n    // react.mutableobject가 저장됨. html 돔 요소를 접근할 수 있는 역할\n    // authorInput이라는 레퍼런스 객체를 통해서 input 태그에 접근할 수 있게 됨\n    const authorInput = useRef();\n    const contentInput = useRef();\n\n    const [state, setState] = useState({\n        author:\"\",\n        content:\"\",\n        emotion:1,\n    });\n\n    // event 객체를 받도록 함 (input과 textarea의 onChange에 전달됨)\n    // 상태변화 이벤트 핸들러도 아래와 같이 합칠 수 있음\n    const handleChangeState = (e) => {\n        console.log(e.target.name);\n        console.log(e.target.value);\n\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n            // author와 content의 값을 각각 바꾸면 각각의 값이 지동으로 업데이트됨.\n        });\n    };\n\n    const handleSubmit = (e) => {\n        if (state.author.length < 1) {\n            // alert('최소 1글자 이상 입력');\n            authorInput.current.focus();\n            // Dom 요소를 선택하는 useRef 기능을 통해 생성한 레퍼런스 객체는 현재 객체를\n            // current라는 프로퍼티를 통해서 authorInput.current는 authorInput 태그가 되고 focus 함수를 이용할 수 있음\n            return;\n        }\n\n        if (state.content.length < 5) {\n            // alert('최소 5글자 이상 입력');\n            contentInput.current.focus();\n            return;\n        }\n\n        onCreate(state.author, state.content, state.emotion);\n        alert('성공');\n    };\n\n\n    // author라는 상태의 상태변화를 주도할 setAuthor라는 상태변화 함수\n    // const [author, setAuthor] = useState(\"\");\n    // const [content, setContent] = useState(\"\");\n\n    // 최상위 태그인 div className을 컴포넌트 이름과 맞춰줌\n    // CSS의 클래스를 가지고 스타일링할 때 클래스의 이름과 컴포넌트의 이름을 정확히 일치시켜\n    // 좀 더 직관적으로 스타일 코드를 작성하기 위함임. (강사개인의견)\n    return <div className=\"DiaryEditor\">\n        <h2>오늘의 일기</h2>\n        <div>\n            <input \n            ref={authorInput}\n            name=\"author\"\n            type=\"text\"\n            value={state.author}\n            //  onChange={(e) => {\n                // setAuthor(e.target.value)\n                // 값이 변할 때마다 상태를 그 값으로 업데이트\n\n                // state에 객체가 가지고 있는 author의 값만 현재 입력받은 값으로 바꿔야함\n                // setState({\n                //     ... state, // author는 author값, content는 content값 (원래의 값을 객체에 할당 가능)\n                    // 주의 : 원래 있던 state를 먼저 펼쳐주고 나서, 변경하고자 하는 state의 프로퍼티를 마지막으로 적어주어야함!\n                    // author:e.target.value,\n                    // content:state.content\n                // });\n            // }}\n            onChange={handleChangeState}\n            />\n        </div>\n        <div>\n            <textarea\n            ref={contentInput}\n            name='content'\n            value={state.content}\n            //  onChange={(e) => {\n                // setContent(e.target.value);\n                // setState({\n                    // author:state.author,\n                    // ...state,\n                    // content:e.target.value\n                // });\n            // }}\n            onChange={handleChangeState}\n            />\n        </div>\n        <div>\n            <select name='emotion'\n            value={state.emotion}\n            onChange={handleChangeState}>\n                <option value={1}>1</option>\n                <option value={2}>2</option>\n                <option value={3}>3</option>\n                <option value={4}>4</option>\n                <option value={5}>5</option>\n            </select>\n        </div>\n        <div>\n            <button onClick={handleSubmit}>저장</button>\n        </div>\n    </div>\n};\n\n// onChange 이벤트에 등록되는 콜백함수는 이벤트 객체 e라는 것을 매개변수로 전달받음\n// onChange는 값이 바뀌었을 때 수행하는 이벤트\n\nexport default DiaryEditor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}