{"ast":null,"code":"var _jsxFileName = \"/Users/songkyungmin/Study/React/simpleDiary/src/LifeCycle.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Lifecycle = () => {\n  _s();\n  // callback 함수 넣고 dependency array\n  useEffect(() => {\n    // 컴포넌트가 마운트된 시점에 콘솔이 수행됨\n    // 진짜 마운트된 시점에만 useeffect의 callback 함수가 실행되는지 확인하기 위해 카운트 증가\n    // 그러나 useEffect에 빈 배열을 전달하게 되면 callback함수는 컴포넌트가 마운트 된 시점에만 작동하기 때문에\n    // 카운트를 증가시켜도 콘솔이 수행되지 않음 \n    console.log(\"mount!\");\n  }, []);\n\n  // 컴포넌트가 업데이트되는 순간 제어 \n  // 컴포넌트가 업데이트되는 순간: state가 변경될 때, 부모에서 내려받는 props가 바뀌거나 부모 컴포넌트가 리렌더링되면 자기 자신도 리렌더링됨\n  // state를 바꾸는 순간을  useEffect로 제어\n  // dependency array를 전달하지 않으면 됨.\n\n  useEffect(() => {\n    // count 증가시키면 콘솔 수행됨\n    console.log(\"update!\");\n  });\n\n  // useEffect의 특별한 기능\n  // dependency array의 배열이 변화하는 순간 콜백 수행됨\n  useEffect(() => {\n    console.log(`count is update: ${count}`);\n  }, [count]);\n  const [count, setCount] = useState(0); //counter에 사용될 state\n  const [text, setText] = useState(\"\"); //input에 사용될 text state\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [count, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(count + 1),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(Lifecycle, \"p+lhbzY0Izyzc4V/zgJWc+hObOE=\");\n_c = Lifecycle;\nexport default Lifecycle;\nvar _c;\n$RefreshReg$(_c, \"Lifecycle\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Lifecycle","_s","console","log","count","setCount","text","setText","style","padding","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/songkyungmin/Study/React/simpleDiary/src/LifeCycle.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Lifecycle = () => {\n\n    // callback 함수 넣고 dependency array\n    useEffect(() => {\n        // 컴포넌트가 마운트된 시점에 콘솔이 수행됨\n        // 진짜 마운트된 시점에만 useeffect의 callback 함수가 실행되는지 확인하기 위해 카운트 증가\n        // 그러나 useEffect에 빈 배열을 전달하게 되면 callback함수는 컴포넌트가 마운트 된 시점에만 작동하기 때문에\n        // 카운트를 증가시켜도 콘솔이 수행되지 않음 \n        console.log(\"mount!\");\n    }, []);\n\n    // 컴포넌트가 업데이트되는 순간 제어 \n    // 컴포넌트가 업데이트되는 순간: state가 변경될 때, 부모에서 내려받는 props가 바뀌거나 부모 컴포넌트가 리렌더링되면 자기 자신도 리렌더링됨\n    // state를 바꾸는 순간을  useEffect로 제어\n    // dependency array를 전달하지 않으면 됨.\n\n    useEffect(() => {\n        // count 증가시키면 콘솔 수행됨\n        console.log(\"update!\");\n    });\n\n    // useEffect의 특별한 기능\n    // dependency array의 배열이 변화하는 순간 콜백 수행됨\n    useEffect(()=>{\n        console.log(`count is update: ${count}`)\n    }, [count])\n\n    const [count, setCount] = useState(0); //counter에 사용될 state\n    const [text, setText] = useState(\"\"); //input에 사용될 text state\n    return (\n        <div style={{padding: 20}}>\n        <div>\n            {count}\n            <button onClick={()=>setCount(count+1)}>+</button>\n        </div>\n        <div>\n            <input value={text} onChange={(e)=>setText(e.target.value)}></input>\n        </div>\n    </div>\n    );\n};\n\nexport default Lifecycle;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB;EACAL,SAAS,CAAC,MAAM;IACZ;IACA;IACA;IACA;IACAM,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;;EAEAP,SAAS,CAAC,MAAM;IACZ;IACAM,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EAC1B,CAAC,CAAC;;EAEF;EACA;EACAP,SAAS,CAAC,MAAI;IACVM,OAAO,CAACC,GAAG,CAAE,oBAAmBC,KAAM,EAAC,CAAC;EAC5C,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAM,CAACA,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,oBACIE,OAAA;IAAKS,KAAK,EAAE;MAACC,OAAO,EAAE;IAAE,CAAE;IAAAC,QAAA,gBAC1BX,OAAA;MAAAW,QAAA,GACKN,KAAK,eACNL,OAAA;QAAQY,OAAO,EAAEA,CAAA,KAAIN,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAE;QAAAM,QAAA,EAAC;MAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eACNhB,OAAA;MAAAW,QAAA,eACIX,OAAA;QAAOiB,KAAK,EAAEV,IAAK;QAACW,QAAQ,EAAGC,CAAC,IAAGX,OAAO,CAACW,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACd,EAAA,CAxCID,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}